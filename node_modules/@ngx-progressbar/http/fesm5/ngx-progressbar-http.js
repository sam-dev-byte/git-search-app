import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(_ngProgress) {
        this._ngProgress = _ngProgress;
        this._inProgressCount = 0;
    }
    // Ignoring specific requests will be supported after this https://github.com/angular/angular/issues/18155
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NgProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        this._inProgressCount++;
        if (!this._ngProgress.ref('root').isStarted) {
            this._ngProgress.start();
        }
        return next.handle(req).pipe(finalize(function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._ngProgress.complete();
            }
        }));
    };
    NgProgressInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress, },
    ]; };
    return NgProgressInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgProgressHttpModule = /** @class */ (function () {
    function NgProgressHttpModule() {
    }
    NgProgressHttpModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                    ],
                },] },
    ];
    return NgProgressHttpModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgProgressHttpModule, NgProgressInterceptor as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByb2dyZXNzYmFyLWh0dHAuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9saWIvbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiLCJuZzovL0BuZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9saWIvbmctcHJvZ3Jlc3MtaHR0cC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzIH0gZnJvbSAnQG5neC1wcm9ncmVzc2Jhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcblxyXG4gIHByaXZhdGUgX2luUHJvZ3Jlc3NDb3VudCA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nUHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MpIHtcclxuICB9XHJcblxyXG4gIC8vIElnbm9yaW5nIHNwZWNpZmljIHJlcXVlc3RzIHdpbGwgYmUgc3VwcG9ydGVkIGFmdGVyIHRoaXMgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTgxNTVcclxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudCsrO1xyXG4gICAgaWYgKCF0aGlzLl9uZ1Byb2dyZXNzLnJlZigncm9vdCcpLmlzU3RhcnRlZCkge1xyXG4gICAgICB0aGlzLl9uZ1Byb2dyZXNzLnN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKGZpbmFsaXplKCgpID0+IHtcclxuICAgICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50LS07XHJcbiAgICAgIGlmICh0aGlzLl9pblByb2dyZXNzQ291bnQgPT09IDApIHtcclxuICAgICAgICB0aGlzLl9uZ1Byb2dyZXNzLmNvbXBsZXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NJbnRlcmNlcHRvciB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3InO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH1cclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc0h0dHBNb2R1bGUge31cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0lBV0UsK0JBQW9CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO2dDQUZoQixDQUFDO0tBRzNCOzs7Ozs7O0lBR0QseUNBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCO1FBQWxELGlCQVdDO1FBVkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRTtZQUMzQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDcEMsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxLQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO2dCQUMvQixLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQzdCO1NBQ0YsQ0FBQyxDQUFDLENBQUM7S0FDTDs7Z0JBcEJGLFVBQVU7Ozs7Z0JBRkYsVUFBVTs7Z0NBSm5COzs7Ozs7O0FDQUE7Ozs7Z0JBSUMsUUFBUSxTQUFDO29CQUNSLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtxQkFDN0U7aUJBQ0Y7OytCQVJEOzs7Ozs7Ozs7Ozs7Ozs7In0=