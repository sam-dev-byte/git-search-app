{"version":3,"file":"ngx-progressbar-http.umd.js.map","sources":["ng://@ngx-progressbar/http/lib/ng-progress.interceptor.ts","ng://@ngx-progressbar/http/lib/ng-progress-http.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgProgress } from '@ngx-progressbar/core';\r\n\r\n@Injectable()\r\nexport class NgProgressInterceptor implements HttpInterceptor {\r\n\r\n  private _inProgressCount = 0;\r\n\r\n  constructor(private _ngProgress: NgProgress) {\r\n  }\r\n\r\n  // Ignoring specific requests will be supported after this https://github.com/angular/angular/issues/18155\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    this._inProgressCount++;\r\n    if (!this._ngProgress.ref('root').isStarted) {\r\n      this._ngProgress.start();\r\n    }\r\n    return next.handle(req).pipe(finalize(() => {\r\n      this._inProgressCount--;\r\n      if (this._inProgressCount === 0) {\r\n        this._ngProgress.complete();\r\n      }\r\n    }));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\r\n\r\n@NgModule({\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\r\n  ],\r\n})\r\nexport class NgProgressHttpModule {}\r\n"],"names":["finalize","Injectable","NgProgress","NgModule","HTTP_INTERCEPTORS"],"mappings":";;;;;;;;;;AAAA;QAWE,+BAAoB,WAAuB;YAAvB,gBAAW,GAAX,WAAW,CAAY;oCAFhB,CAAC;SAG3B;;;;;;;QAGD,yCAAS;;;;;YAAT,UAAU,GAAqB,EAAE,IAAiB;gBAAlD,iBAWC;gBAVC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE;oBAC3C,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;iBAC1B;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAACA,kBAAQ,CAAC;oBACpC,KAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,IAAI,KAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;wBAC/B,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;qBAC7B;iBACF,CAAC,CAAC,CAAC;aACL;;oBApBFC,eAAU;;;;;wBAFFC,iBAAU;;;oCAJnB;;;;;;;ACAA;;;;oBAICC,aAAQ,SAAC;wBACR,SAAS,EAAE;4BACT,EAAE,OAAO,EAAEC,sBAAiB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,KAAK,EAAE,IAAI,EAAE;yBAC7E;qBACF;;mCARD;;;;;;;;;;;;;;;;;;;;;;;;"}
