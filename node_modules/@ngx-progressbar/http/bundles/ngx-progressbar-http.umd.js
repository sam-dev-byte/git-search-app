(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('@ngx-progressbar/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@ngx-progressbar/http', ['exports', '@angular/core', 'rxjs/operators', '@ngx-progressbar/core', '@angular/common/http'], factory) :
    (factory((global['ngx-progressbar'] = global['ngx-progressbar'] || {}, global['ngx-progressbar'].http = {}),global.ng.core,global.Rx.Observable.prototype,null,global.ng.common.http));
}(this, (function (exports,core,operators,core$1,http) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgProgressInterceptor = (function () {
        function NgProgressInterceptor(_ngProgress) {
            this._ngProgress = _ngProgress;
            this._inProgressCount = 0;
        }
        // Ignoring specific requests will be supported after this https://github.com/angular/angular/issues/18155
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        NgProgressInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                var _this = this;
                this._inProgressCount++;
                if (!this._ngProgress.ref('root').isStarted) {
                    this._ngProgress.start();
                }
                return next.handle(req).pipe(operators.finalize(function () {
                    _this._inProgressCount--;
                    if (_this._inProgressCount === 0) {
                        _this._ngProgress.complete();
                    }
                }));
            };
        NgProgressInterceptor.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NgProgressInterceptor.ctorParameters = function () {
            return [
                { type: core$1.NgProgress, },
            ];
        };
        return NgProgressInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgProgressHttpModule = (function () {
        function NgProgressHttpModule() {
        }
        NgProgressHttpModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            { provide: http.HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                        ],
                    },] },
        ];
        return NgProgressHttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgProgressHttpModule = NgProgressHttpModule;
    exports.Éµa = NgProgressInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByb2dyZXNzYmFyLWh0dHAudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LXByb2dyZXNzYmFyL2h0dHAvbGliL25nLXByb2dyZXNzLmludGVyY2VwdG9yLnRzIiwibmc6Ly9Abmd4LXByb2dyZXNzYmFyL2h0dHAvbGliL25nLXByb2dyZXNzLWh0dHAubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzcyB9IGZyb20gJ0BuZ3gtcHJvZ3Jlc3NiYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICBwcml2YXRlIF9pblByb2dyZXNzQ291bnQgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ1Byb2dyZXNzOiBOZ1Byb2dyZXNzKSB7XHJcbiAgfVxyXG5cclxuICAvLyBJZ25vcmluZyBzcGVjaWZpYyByZXF1ZXN0cyB3aWxsIGJlIHN1cHBvcnRlZCBhZnRlciB0aGlzIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE4MTU1XHJcbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICB0aGlzLl9pblByb2dyZXNzQ291bnQrKztcclxuICAgIGlmICghdGhpcy5fbmdQcm9ncmVzcy5yZWYoJ3Jvb3QnKS5pc1N0YXJ0ZWQpIHtcclxuICAgICAgdGhpcy5fbmdQcm9ncmVzcy5zdGFydCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudC0tO1xyXG4gICAgICBpZiAodGhpcy5faW5Qcm9ncmVzc0NvdW50ID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5fbmdQcm9ncmVzcy5jb21wbGV0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgfSBmcm9tICcuL25nLXByb2dyZXNzLmludGVyY2VwdG9yJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogTmdQcm9ncmVzc0ludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9XHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NIdHRwTW9kdWxlIHt9XHJcbiJdLCJuYW1lcyI6WyJmaW5hbGl6ZSIsIkluamVjdGFibGUiLCJOZ1Byb2dyZXNzIiwiTmdNb2R1bGUiLCJIVFRQX0lOVEVSQ0VQVE9SUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBV0UsK0JBQW9CLFdBQXVCO1lBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO29DQUZoQixDQUFDO1NBRzNCOzs7Ozs7O1FBR0QseUNBQVM7Ozs7O1lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCO2dCQUFsRCxpQkFXQztnQkFWQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRTtvQkFDM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDMUI7Z0JBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQ0Esa0JBQVEsQ0FBQztvQkFDcEMsS0FBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7b0JBQ3hCLElBQUksS0FBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsRUFBRTt3QkFDL0IsS0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztxQkFDN0I7aUJBQ0YsQ0FBQyxDQUFDLENBQUM7YUFDTDs7b0JBcEJGQyxlQUFVOzs7Ozt3QkFGRkMsaUJBQVU7OztvQ0FKbkI7Ozs7Ozs7QUNBQTs7OztvQkFJQ0MsYUFBUSxTQUFDO3dCQUNSLFNBQVMsRUFBRTs0QkFDVCxFQUFFLE9BQU8sRUFBRUMsc0JBQWlCLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7eUJBQzdFO3FCQUNGOzttQ0FSRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9